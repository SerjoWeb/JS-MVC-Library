!function r(o,i,u){function l(t,e){if(!i[t]){if(!o[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(a)return a(t,!0);throw(n=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",n}n=i[t]={exports:{}},o[t][0].call(n.exports,function(e){return l(o[t][1][e]||e)},n,n.exports,r,o,i,u)}return i[t].exports}for(var a="function"==typeof require&&require,e=0;e<u.length;e++)l(u[e]);return l}({1:[function(e,t,n){"use strict";e=(r=e("./views/view-test"))&&r.__esModule?r:{default:r};var r=document.getElementById("root"),e="\n    <div>\n        <h1>App Works!</h1>\n        <p>Start to make a web apps easier!</p>\n    </div>\n  \n    <div>\n        <h2>".concat("User list","</h2>\n\n        <div class='user-list'>\n            ").concat(e.default.render(),"\n        </div>\n    </div>\n");r.innerHTML=e},{"./views/view-test":4}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=(e=e("../../models/model-test"))&&e.__esModule?e:{default:e};n.default={init:function(){return r.default.getData()}}},{"../../models/model-test":3}],3:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;n.default={getData:function(){return{users:[{name:"Jack",email:"jack@gmail.com",phone:"89112345678"},{name:"John",email:"john@gmail.com",phone:"89213457869"},{name:"Julie",email:"julie@gmail.com",phone:"89814526545"}]}}}},{}],4:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var r=(e=e("../../controllers/controller-test"))&&e.__esModule?e:{default:e};n.default={render:function(){return r.default.init().users.map(function(e){return"\n                <div class='user'>\n                    <ul>\n                        <li>Name: ".concat(e.name,"</li>\n                        <li>Email: ").concat(e.email,"</li>\n                        <li>Phone: ").concat(e.phone,"</li>\n                    </ul>\n                </div>\n            ")})}}},{"../../controllers/controller-test":2}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
